{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","user","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","res","json","robotfiltered","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCNSC,EAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,4BAAKL,GACL,2BAAIC,KCMKK,EAVE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,kBAAC,WAAD,KAEIA,EAAOC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKP,GAAIF,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,MAAOC,GAAIO,EAAKP,UCQ7ES,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKT,UAAU,OACb,2BACEU,KAAK,SACLV,UAAU,mCACVW,YAAY,eACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCgBEC,E,YAlBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CACZJ,UAAU,M,+BAKZ,OAAOG,KAAKJ,MAAMC,SAAW,sDAAkCG,KAAKX,MAAMK,a,GAfnDQ,aCkDZC,G,kBA5Cb,aAAe,IAAD,8BACZ,+CAgBFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CACZK,YAAaD,EAAME,OAAOC,SAjB5B,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA7B,GAAI,OACR,EAAKoB,SAAS,CACZtB,OAAQE,S,+BAUN,IAAD,EACyBmB,KAAKJ,MAA7BjB,EADD,EACCA,OAAQ2B,EADT,EACSA,YACVO,EAAgBlC,EAAOmC,QAAO,SAAAC,GAAK,OACvCA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAEhD,OAAQrC,EAAOuC,OACb,kBAAC,WAAD,KACE,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,UAAd,eACA,kBAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQkC,QAPJ,wBAAItC,UAAU,MAAd,e,GA7BV2B,cCAlBiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.b6101a86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <Fragment>\n      {\n        robots.map(user => <Card key={user.id} name={user.name} email={user.email} id={user.id} />)\n      }\n    </Fragment>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ SearchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type='search'\n        className='pa3 ba bg-lightest-blue b--green'\n        placeholder='Search Robot'\n        onChange={SearchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    return this.state.hasError ? <h1>Opps. This is not good</h1> : this.props.children;\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component, Fragment } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(user =>\n        this.setState({\n          robots: user\n        }));\n  }\n\n  onSearchChange = event => {\n    this.setState({\n      searchfield: event.target.value,\n    });\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const robotfiltered = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    )\n    return !robots.length ? <h1 className=\"tc\">Loading</h1> : (\n      <Fragment>\n        <div className=\"tc\">\n          <h1 className=\"ttu f1\">Robofriends</h1>\n          <SearchBox SearchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={robotfiltered} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}